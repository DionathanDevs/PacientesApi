dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Sqlite
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Swashbuckle.AspNetCore

DOCUMENTAÇÃO TÉCNICA DO PROJETO -- API DE CADASTRO DE PACIENTES

Título do Projeto: Sistema de Gerenciamento de Pacientes

1. Objetivo do Projeto

O objetivo deste projeto é desenvolver uma API para gestão de cadastros de pacientes, utilizando tecnologias modernas como .NET 6, Entity Framework Core e SQLite. A aplicação foi concebida para operações CRUD completas (Create, Read, Update, Delete) de registros de pacientes, com atributos clínicos relevantes como tipo sanguíneo e alergias. O sistema é ideal para clínicas e hospitais que necessitam de um gerenciamento eficiente de dados de pacientes.

2. Estrutura da Solução

2.1 Modelagem de Dados

A modelagem foi centrada na entidade "Paciente", com atributos clinicamente relevantes:

Dados pessoais (Nome, CPF, Data de Nascimento)

Contato (Telefone, Email, Endereço)

Dados médicos (Tipo Sanguíneo, Alergias)

Esta modelagem foi implementada como classe no domínio da aplicação e serve como base para o banco de dados SQLite.

2.2 Arquitetura da API

A API segue o padrão Minimal API do .NET 6, com endpoints RESTful que permitem:

Consulta completa de pacientes

Busca por paciente específico

Cadastro de novos pacientes

Atualização de registros

Remoção de pacientes

3. Endpoints da API

A API possui os seguintes endpoints:

Método	Rota	Descrição	Parâmetros
GET	/pacientes	Retorna todos os pacientes cadastrados	-
GET	/pacientes/{id}	Retorna um paciente específico por ID	ID (int)
POST	/pacientes	Adiciona um novo paciente	Objeto Paciente (JSON no body)
PUT	/pacientes/{id}	Atualiza os dados de um paciente existente	ID (int), Objeto Paciente (JSON)
DELETE	/pacientes/{id}	Remove um paciente do sistema	ID (int)
4. Organização do Código

O projeto segue uma estrutura modular:

Models/

Paciente.cs - Entidade principal com todos os atributos

Data/

AppDbContext.cs - Configuração do EF Core e SQLite

Endpoints/

GetPacientes.cs - Listagem completa

GetPacienteById.cs - Busca por ID

CreatePaciente.cs - Cadastro

UpdatePaciente.cs - Atualização

DeletePaciente.cs - Remoção

Program.cs - Configuração inicial e middleware

5. Modelo de Dados (Paciente)

Campo	Tipo	Descrição	Obrigatório
Id	int	Identificador único	Automático
Nome	string	Nome completo do paciente	Sim
CPF	string	CPF no formato 000.000.000-00	Sim
DataNascimento	DateTime	Data de nascimento	Sim
Telefone	string	Número para contato	Sim
Email	string	E-mail para contato	Não
Endereco	string	Endereço completo	Não
TipoSanguineo	string	Tipo sanguíneo (A+, B-, AB+, etc.)	Não
Alergias	string	Lista de alergias conhecidas	Não
6. Exemplo de Requisições

6.1 Cadastrar Paciente (POST)

http
POST /pacientes
Content-Type: application/json

{
  "nome": "Maria Oliveira",
  "cpf": "123.456.789-09",
  "dataNascimento": "1985-05-15",
  "telefone": "(11) 99999-8888",
  "email": "maria@email.com",
  "endereco": "Rua das Flores, 123 - São Paulo/SP",
  "tipoSanguineo": "A+",
  "alergias": "Penicilina"
}
6.2 Atualizar Paciente (PUT)

http
PUT /pacientes/1
Content-Type: application/json

{
  "nome": "Maria Oliveira Santos",
  "cpf": "123.456.789-09",
  "dataNascimento": "1985-05-15",
  "telefone": "(11) 98888-7777",
  "email": "maria.santos@email.com",
  "endereco": "Av. Paulista, 1001 - São Paulo/SP",
  "tipoSanguineo": "A+",
  "alergias": "Penicilina, Amendoim"
}
7. Justificativa Técnica

A arquitetura escolhida oferece:

Desempenho: Minimal APIs do .NET 6 são otimizadas para performance

Simplicidade: Estrutura enxuta com pouca cerimônia

Manutenibilidade: Separação clara de responsabilidades

Portabilidade: SQLite como banco embutido facilita deploy

Extensibilidade: Fácil adição de novos endpoints e funcionalidades

8. Swagger UI

A API inclui documentação interativa via Swagger UI, acessível em:

http://[host]:[port]/swagger
9. Pré-requisitos e Execução

.NET 6 SDK instalado

Executar dotnet restore para restaurar pacotes

Executar dotnet run para iniciar a aplicação

A API estará disponível em http://localhost:5000 (ou porta configurada)

10. Próximos Passos (Roadmap)

Implementar autenticação e autorização

Adicionar paginação nos endpoints de listagem

Implementar validações avançadas dos dados

Adicionar logging completo

Criar sistema de backup automático do banco de dados
